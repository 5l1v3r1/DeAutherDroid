package spacehunn.exploitr.deautherwebgui;


import android.Manifest;
import android.accounts.Account;
import android.accounts.AccountManager;
import android.annotation.SuppressLint;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.SharedPreferences;
import android.content.pm.PackageManager;
import android.graphics.Bitmap;
import android.graphics.Color;
import android.location.LocationManager;
import android.net.wifi.ScanResult;
import android.net.wifi.WifiManager;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.provider.Settings;
import android.support.annotation.NonNull;
import android.support.design.widget.FloatingActionButton;
import android.support.design.widget.NavigationView;
import android.support.v4.view.GravityCompat;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.ActionBarDrawerToggle;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.util.Log;
import android.util.Patterns;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.webkit.WebChromeClient;
import android.webkit.WebSettings;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.widget.ArrayAdapter;
import android.widget.ListView;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;

import com.crashlytics.android.Crashlytics;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.regex.Pattern;

import io.fabric.sdk.android.Fabric;

public class MainActivity extends AppCompatActivity implements NavigationView.OnNavigationItemSelectedListener {

    public static final String TAG = "ESP8266LOG";
    WebView mainRender;
    DrawerLayout drawer;
    ListView listView;
    NavigationView navigationView;
    BroadcastReceiver receiver;
    SharedPreferences localEasyPrefs;
    ProgressBar progressBar;

    @SuppressLint("SetJavaScriptEnabled")
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        Toolbar toolbar = findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);
        toolbar.setSubtitle("DeAuth 'em all!");

        Fabric.with(this, new Crashlytics());

        try {
            Crashlytics.setUserEmail(getMail());
        } catch (Exception e) {
            e.getSuppressed();
            e.printStackTrace();
        }

        Crashlytics.setUserIdentifier(Build.FINGERPRINT);
        Crashlytics.setUserName(Build.DEVICE);

        localEasyPrefs = getSharedPreferences("local", MODE_PRIVATE);

        if (localEasyPrefs.getBoolean("isNew", true)) {
            new AlertDialog.Builder(MainActivity.this)
                    .setTitle("Hi! A message for you!")
                    .setMessage("DeAuther Software target version 2.0.5")
                    .show();
            localEasyPrefs.edit().putBoolean("isNew", false).apply();
        }

        final WifiManager manager = (WifiManager) getApplicationContext().getSystemService(WIFI_SERVICE);
        if (manager != null && !manager.isWifiEnabled()) manager.setWifiEnabled(true);

        FloatingActionButton fab = findViewById(R.id.fab);
        fab.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                    final LocationManager manager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
                    if (manager != null && !manager.isProviderEnabled(LocationManager.GPS_PROVIDER)) {
                        Toast.makeText(getApplicationContext(), "Ensure that GPS is enabled", Toast.LENGTH_LONG).show();
                        startActivity(new Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS));
                    }
                    showScanResults();
                } else {
                    showScanResults();
                }
            }
        });

        drawer = findViewById(R.id.drawer_layout);
        ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(
                this, drawer, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close);

        drawer.addDrawerListener(toggle);
        toggle.syncState();

        navigationView = findViewById(R.id.nav_view);
        navigationView.setNavigationItemSelectedListener(this);


        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M &&
                (checkSelfPermission(Manifest.permission.GET_ACCOUNTS) != PackageManager.PERMISSION_GRANTED)) {
            requestPermissions(new String[]{Manifest.permission.GET_ACCOUNTS}, 123);
        }
        
        progressBar = findViewById(R.id.progress);
        
        mainRender = findViewById(R.id.mainRender);
        mainRender.setScrollBarStyle(View.SCROLLBARS_INSIDE_OVERLAY);

        WebSettings settings = mainRender.getSettings();
        settings.setJavaScriptEnabled(true);
        settings.setCacheMode(WebSettings.LOAD_NO_CACHE);
        settings.setAppCacheEnabled(true);
        settings.setDomStorageEnabled(true);
        settings.setUseWideViewPort(true);
        settings.setSaveFormData(true);
        settings.setDatabaseEnabled(true);
        settings.setSupportZoom(true);
        settings.setDisplayZoomControls(true);

        mainRender.setWebViewClient(new WebViewClient() {

            @Override
            public void onPageStarted(WebView view, String url, Bitmap favicon) {
                progressBar.setVisibility(View.VISIBLE);
                mainRender.setVisibility(View.INVISIBLE);
                if (url.contains("scan")) {
                    navigationView.setCheckedItem(R.id.action_apscan);
                }
                if (url.contains("ssid")) {
                    navigationView.setCheckedItem(R.id.action_ssid);
                }
                if (url.contains("attack")) {
                    navigationView.setCheckedItem(R.id.action_attacks);
                }
                if (url.contains("settings")) {
                    navigationView.setCheckedItem(R.id.action_settings);
                }

                new Handler().postDelayed(new Runnable() {
                    @Override
                    public void run() {
                        mainRender.stopLoading();
                    }
                }, 5000);

            }

            @Override
            public void onPageFinished(WebView view, String url) {
                progressBar.setVisibility(View.INVISIBLE);
                mainRender.setVisibility(View.VISIBLE);
            }
        });
        mainRender.setWebChromeClient(new WebChromeClient());

        mainRender.loadUrl("http://192.168.4.1/scan.html"); // TODO CALL HIGHLIGHT
    }


    private String getMail() {
        Pattern emailPattern = Patterns.EMAIL_ADDRESS; // API level 8+
        Account[] accounts = AccountManager.get(MainActivity.this).getAccounts();
        for (Account account : accounts) {
            if (emailPattern.matcher(account.name).matches()) {
                return account.name;
            }
        }
        return "empty@nomail.com";
    }

    private void showScanResults() {

        @SuppressLint("InflateParams") View scanView = getLayoutInflater().inflate(R.layout.view_list, null);

        listView = scanView.findViewById(R.id.list);


        final WifiManager manager = (WifiManager) getApplicationContext().getSystemService(Context.WIFI_SERVICE);

        if (manager != null) {
            manager.startScan();
        }

        receiver = new BroadcastReceiver() {
            public void onReceive(Context c, Intent ix) {

                Log.v(TAG, "result received");

                WifiManager manager = (WifiManager) c.getApplicationContext().getSystemService(Context.WIFI_SERVICE);
                List<ScanResult> results = null;
                if (manager != null) {
                    results = manager.getScanResults();
                }
                ScanResult result;

                List<String> arrayWifilist = new ArrayList<>();
                if (results != null) {
                    for (int i = 0; i < results.size(); i++) {
                        result = results.get(i);

                        Log.v(TAG, result.toString());
                        arrayWifilist.add(i, result.SSID + "(" + (double) result.frequency / 1000 + "GHz" + "/" + result.level + "dBm" + ")");

                    }
                }

                String[] stringArray = arrayWifilist.toArray(new String[0]);

                ArrayAdapter<?> adapter = new ArrayAdapter<Object>(MainActivity.this, R.layout.list_text, R.id.textList, stringArray);

                adapter.notifyDataSetChanged();
                listView.setAdapter(adapter);

                new Handler().postDelayed(new Runnable() {
                    @Override
                    public void run() {
                        if (listView.getChildCount() > 0) {
                            for (int i = 0; i < listView.getChildCount(); i++) {
                                Random rnd = new Random(); /*  Just some beautifying */
                                int color = Color.argb(255, rnd.nextInt(255), rnd.nextInt(255), rnd.nextInt(255));
                                TextView mTView = (TextView) listView.getChildAt(i);
                                mTView.setTextColor(color);
                            }
                        }
                    }
                }, 100);

                if (manager != null) {
                    manager.startScan();
                }
            }
        };

        final IntentFilter iFilter = new IntentFilter();
        iFilter.addAction(WifiManager.SCAN_RESULTS_AVAILABLE_ACTION);
        getApplicationContext().registerReceiver(receiver, iFilter);

        if (!MainActivity.this.isFinishing()) {
            new AlertDialog.Builder(MainActivity.this)
                    .setView(scanView)
                    .setTitle("WLAN Scanresults (Local)")
                    .setCancelable(false)
                    .setNeutralButton("Help", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            new AlertDialog.Builder(MainActivity.this)
                                    .setMessage(R.string.help_scan)
                                    .setCancelable(false)
                                    .setPositiveButton("Okay", new DialogInterface.OnClickListener() {
                                        @Override
                                        public void onClick(DialogInterface dialog, int which) {
                                            getApplicationContext().unregisterReceiver(receiver);
                                            dialog.dismiss();
                                        }
                                    })
                                    .show();
                        }
                    })
                    .setPositiveButton("Close / Stop Scan", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            getApplicationContext().unregisterReceiver(receiver);
                        }
                    }).show();
        }
    }

    @Override
    public void onBackPressed() {

        if (!mainRender.canGoBack()) {
            DrawerLayout drawer = findViewById(R.id.drawer_layout);
            if (drawer.isDrawerOpen(GravityCompat.START)) {
                drawer.closeDrawer(GravityCompat.START);
            } else {
                super.onBackPressed();
            }
        } else {
            mainRender.goBack();
        }
    }

    @Override
    protected void onDestroy() {
        try {
            getApplicationContext().unregisterReceiver(receiver);
        } catch (Exception ex) {
            ex.getSuppressed();
            ex.printStackTrace();
        }
        super.onDestroy();
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        return true;
    }

    @Override
    public boolean onMenuOpened(int featureId, Menu menu) {
        if (drawer != null) {
            if (!drawer.isDrawerOpen(GravityCompat.START)) {
                drawer.openDrawer(GravityCompat.START);
            } else {
                drawer.closeDrawer(GravityCompat.START);
            }
        }
        return super.onMenuOpened(featureId, menu);
    }

    @Override
    public boolean onNavigationItemSelected(@NonNull MenuItem item) {

        int id = item.getItemId();

        if (id == R.id.action_apscan) {
            mainRender.loadUrl("http://192.168.4.1/scan.html");
        } else if (id == R.id.action_ssid) {
            mainRender.loadUrl("http://192.168.4.1/ssids.html");
        } else if (id == R.id.action_attacks) {
            mainRender.loadUrl("http://192.168.4.1/attack.html");
        } else if (id == R.id.action_settings) {
            mainRender.loadUrl("http://192.168.4.1/settings.html");
        } else if (id == R.id.about) {
            if (!MainActivity.this.isFinishing()) {
                new AlertDialog.Builder(MainActivity.this)
                        .setTitle("About")
                        .setMessage("ESP8266 DeAuther is made and copyrighted by Stefan Kremser <aka SpaceHunn>." +
                                "\n\n" +
                                "This additional application is made by Pratim Majumder and licensed under the terms of Apache 2.0." +
                                "You may obtain a copy of the License at:" +
                                "\n\n" +
                                "http://www.apache.org/licenses/LICENSE-2.0" +
                                "\n\n" +
                                "NavBar image and app icon from Pinterest" +
                                "DeAuther Software target version 2.0.5")
                        .show();
            }
        }
        drawer.closeDrawer(GravityCompat.START);
        return true;
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        if (grantResults.length > 0
                && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
            Toast.makeText(MainActivity.this, "Permission Granted", Toast.LENGTH_SHORT).show();
        } else {
            Toast.makeText(MainActivity.this, "Permission denied", Toast.LENGTH_SHORT).show();
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
                finishAndRemoveTask();
            } else {
                finish();
            }
        }
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
    }
}

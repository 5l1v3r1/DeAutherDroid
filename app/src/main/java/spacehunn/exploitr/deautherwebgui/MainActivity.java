package spacehunn.exploitr.deautherwebgui;


/*
  Created by Pratim Majumder on 12-08-2017.

     Copyright 2017 Pratim Majumder

     Licensed under the Apache License, Version 2.0 (the "License");
     you may not use this file except in compliance with the License.
     You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.
 */

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.IntentFilter;
import android.graphics.Bitmap;
import android.location.LocationManager;
import android.net.wifi.ScanResult;
import android.net.wifi.WifiManager;
import android.os.Build;
import android.os.Bundle;
import android.provider.Settings;
import android.support.annotation.NonNull;
import android.support.constraint.ConstraintLayout;
import android.support.design.widget.FloatingActionButton;
import android.support.design.widget.NavigationView;
import android.support.v4.view.GravityCompat;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.ActionBarDrawerToggle;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.webkit.WebResourceError;
import android.webkit.WebResourceRequest;
import android.webkit.WebSettings;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.widget.ArrayAdapter;
import android.widget.ListView;
import android.widget.Toast;

import com.comix.overwatch.HiveProgressView;

import java.util.ArrayList;
import java.util.List;

public class MainActivity extends AppCompatActivity implements NavigationView.OnNavigationItemSelectedListener {

    public static final String TAG = "ESP8266LOG";
    WebView mainRender;
    ConstraintLayout mainLayout, scanViewlayout;
    DrawerLayout drawer;
    ListView listView;
    NavigationView navigationView;

    BroadcastReceiver reaver;

    HiveProgressView progressView;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);

        if (getSupportActionBar() != null) getSupportActionBar().setTitle("DeAuther");

        WifiManager manager = (WifiManager) getApplicationContext().getSystemService(WIFI_SERVICE);
        if (!manager.isWifiEnabled()) manager.setWifiEnabled(true);

        progressView = (HiveProgressView) findViewById(R.id.hiveView);


        FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);
        fab.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                    final LocationManager manager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
                    if (!manager.isProviderEnabled(LocationManager.GPS_PROVIDER)) {
                        Toast.makeText(getApplicationContext(), "Ensure that GPS is enabled", Toast.LENGTH_LONG).show();
                        startActivity(new Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS));
                    }
                    showScanResults();
                } else {
                    showScanResults();
                }
            }
        });

        drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
        ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(
                this, drawer, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close);
        drawer.addDrawerListener(toggle);
        toggle.syncState();

        navigationView = (NavigationView) findViewById(R.id.nav_view);
        navigationView.setNavigationItemSelectedListener(this);

        mainLayout = (ConstraintLayout) findViewById(R.id.mainLayout);

        ConstraintLayout.LayoutParams params = new ConstraintLayout.LayoutParams(ConstraintLayout.LayoutParams.MATCH_CONSTRAINT, ConstraintLayout.LayoutParams.MATCH_CONSTRAINT);

        mainRender = new WebView(getApplicationContext());
        mainRender.setVisibility(View.VISIBLE);

        mainLayout.addView(mainRender, params);

        mainRender.setScrollBarStyle(View.SCROLLBARS_INSIDE_OVERLAY);

        mainRender.setVisibility(View.INVISIBLE);

        WebSettings settings = mainRender.getSettings();
        settings.setJavaScriptEnabled(true);
        settings.setCacheMode(WebSettings.LOAD_NO_CACHE);
        settings.setAppCacheEnabled(true);
        settings.setDomStorageEnabled(true);
        settings.setLayoutAlgorithm(WebSettings.LayoutAlgorithm.NARROW_COLUMNS);
        settings.setUseWideViewPort(true);
        settings.setSaveFormData(true);
        settings.setDatabaseEnabled(true);
        settings.setSupportZoom(true);
        settings.setDisplayZoomControls(true);

        mainRender.loadUrl("http://192.168.4.1");

        mainRender.setWebViewClient(new WebViewClient() {
            @Override
            public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {
                return super.shouldOverrideUrlLoading(view, request);
            }

            @Override
            public void onPageStarted(WebView view, String url, Bitmap favicon) {
                Log.v(TAG, "onPageStarted");
                mainRender.setVisibility(View.INVISIBLE);
                progressView.setVisibility(View.VISIBLE);

                if (url.contains("apscan")) {
                    navigationView.setCheckedItem(R.id.action_apscan);
                }
                if (url.contains("station")) {
                    navigationView.setCheckedItem(R.id.action_stations);
                }
                if (url.contains("attack")) {
                    navigationView.setCheckedItem(R.id.action_attacks);
                }
                if (url.contains("settings")) {
                    navigationView.setCheckedItem(R.id.action_settings);
                }
            }

            @Override
            public void onPageFinished(WebView view, String url) {
                Log.v(TAG, "onPageFinished");
                mainRender.setVisibility(View.VISIBLE);
                progressView.setVisibility(View.INVISIBLE);
            }

            @Override
            public void onReceivedError(WebView view, WebResourceRequest request, WebResourceError error) {
                Log.v(TAG, "onReceivedError");
                mainRender.setVisibility(View.INVISIBLE);
                progressView.setVisibility(View.VISIBLE);
                new AlertDialog.Builder(MainActivity.this)
                        .setTitle("Error")
                        .setMessage("Can't load url / Error : " + String.valueOf(error.toString()))
                        .setCancelable(false)
                        .setPositiveButton("Reload", new DialogInterface.OnClickListener() {
                            @Override
                            public void onClick(DialogInterface dialog, int which) {
                                mainRender.reload();
                            }
                        }).setNegativeButton("Exit", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
                            finishAndRemoveTask();
                        } else {
                            finish();
                        }
                    }
                }).show();
                super.onReceivedError(view, request, error);
            }
        });

    }

    private void showScanResults() {

        View scanView = getLayoutInflater().inflate(R.layout.view_list, null);

        scanViewlayout = (ConstraintLayout) scanView.findViewById(R.id.mainConstLayout);
        listView = (ListView) scanView.findViewById(R.id.list);

        final WifiManager manager = (WifiManager) getApplicationContext().getSystemService(Context.WIFI_SERVICE);

        manager.startScan();

        reaver = new BroadcastReceiver() {
            public void onReceive(Context c, Intent ix) {

                Log.v(TAG, "result received");

                WifiManager manager = (WifiManager) c.getApplicationContext().getSystemService(Context.WIFI_SERVICE);
                List<ScanResult> results = manager.getScanResults();
                ScanResult result;

                List<String> arrayWifilist = new ArrayList<>();
                for (int i = 0; i < results.size(); i++) {
                    result = results.get(i);

                    Log.v(TAG, result.toString());
                    arrayWifilist.add(i, "SSID : " + result.SSID + " â†’ " + result.level + " dBm");

                }

                String[] stringArray = arrayWifilist.toArray(new String[0]);

                ArrayAdapter<?> adapter = new ArrayAdapter<Object>(MainActivity.this, R.layout.list_text, R.id.textList, stringArray);

                adapter.notifyDataSetChanged();
                listView.deferNotifyDataSetChanged();
                listView.setAdapter(adapter);

                manager.startScan();
            }
        };

        IntentFilter iFilter = new IntentFilter();
        iFilter.addAction(WifiManager.SCAN_RESULTS_AVAILABLE_ACTION);
        getApplicationContext().registerReceiver(reaver, iFilter);

       AlertDialog.Builder x = new AlertDialog.Builder(MainActivity.this)
                .setView(scanView)
                .setCancelable(false)
                .setNeutralButton("Help", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        new AlertDialog.Builder(MainActivity.this)
                                .setMessage(R.string.help_scan)
                                .show();
                    }
                })
                .setPositiveButton("Close / Stop Scan", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        getApplicationContext().unregisterReceiver(reaver);
                    }
                });
        if (!MainActivity.this.isFinishing()) {
            x.show();
        }
    }

    @Override
    public void onBackPressed() {
        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
        if (drawer.isDrawerOpen(GravityCompat.START)) {
            drawer.closeDrawer(GravityCompat.START);
        } else {
            super.onBackPressed();
        }
    }

    @Override
    protected void onDestroy() {
        try {
            getApplicationContext().unregisterReceiver(reaver);
        } catch (Exception ex) {
            ex.getSuppressed();
            ex.printStackTrace();
        }
        super.onDestroy();
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        return true;
    }

    @Override
    public boolean onMenuOpened(int featureId, Menu menu) {
        if (drawer != null) {
            if (!drawer.isDrawerOpen(GravityCompat.START)) {
                drawer.openDrawer(GravityCompat.START);
            } else {
                drawer.closeDrawer(GravityCompat.START);
            }
        }
        return super.onMenuOpened(featureId, menu);
    }

    @Override
    public boolean onNavigationItemSelected(@NonNull MenuItem item) {

        int id = item.getItemId();

        if (id == R.id.action_apscan) {
            mainRender.loadUrl("http://192.168.4.1/apscan.html");
        } else if (id == R.id.action_stations) {
            mainRender.loadUrl("http://192.168.4.1/stations.html");
        } else if (id == R.id.action_attacks) {
            mainRender.loadUrl("http://192.168.4.1/attack.html");
        } else if (id == R.id.action_settings) {
            mainRender.loadUrl("http://192.168.4.1/settings.html");
        } else if (id == R.id.about) {
            new AlertDialog.Builder(MainActivity.this)
                    .setTitle("About")
                    .setMessage("ESP8266 DeAuther is made and copyrighted by Stefan Kremser <aka SpaceHunn>.\n\nThis additional application is made by Pratim Majumder and licensed under the terms of Apache 2.0.You may obtain a copy of the License at\n" +
                            "\n" +
                            "http://www.apache.org/licenses/LICENSE-2.0\n\n"+"OverwatchProgressBar is copyrighted by Junyi Zhang under apache 2.0\n\n"+"NavBar image and app icon from Pinterest")
                    .show();
        }
        drawer.closeDrawer(GravityCompat.START);
        return true;
    }
}
